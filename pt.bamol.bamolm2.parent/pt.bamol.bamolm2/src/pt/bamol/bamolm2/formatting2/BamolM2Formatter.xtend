/*
 * generated by Xtext 2.22.0
 */
package pt.bamol.bamolm2.formatting2

import pt.bamol.bamolm2.Root
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import pt.bamol.bamolm2.services.BamolM2GrammarAccess
import pt.bamol.bamolm2.Models
import pt.bamol.bamolm2.ModelsDatasources
import pt.bamol.bamolm2.ModelsSelectors
import pt.bamol.bamolm2.Element
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject

class BamolM2Formatter extends AbstractFormatter2 {
	
	@Inject extension BamolM2GrammarAccess

	def dispatch void format(Root root, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
//		(root as Element).format
		
		// Exemplo
		val open = root.regionFor.keyword("{")
		val close = root.regionFor.keyword("}")
		open.append[newLine]
		open.prepend[newLine]
		close.append[newLine]
		close.prepend[newLine]
		interior(open, close, [indent])
		//----
		
    	// Maybe tenantsecurity does not exist....
//		for (tenantsecuritys : root.tenantsecuritys) {
//			(tenantsecuritys as Element).format
//		}
		
		for (models : root.models) {
			(models as Element).format
		}
	}

//	def dispatch void format(Tenantsecuritys tenantsecuritys, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		interior(
//        	tenantsecuritys.regionFor.keyword('{').append[newLine],
//        	tenantsecuritys.regionFor.keyword('}'),
//        	[indent]
//    	)		
//		
//		for (tenantsecuritysAuthorizationpolicys : tenantsecuritys.authorizationpolicys) {
//			tenantsecuritysAuthorizationpolicys.format
//		}
//		for (tenantsecuritysAuthorizationroles : tenantsecuritys.authorizationroles) {
//			tenantsecuritysAuthorizationroles.format
//		}
//	}

//	def dispatch void format(TenantsecuritysAuthorizationpolicys authorizationpolicys, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		interior(
//        	authorizationpolicys.regionFor.keyword('{').append[newLine],
//        	authorizationpolicys.regionFor.keyword('}'),
//        	[indent]
//    	)		
//		
//		for (authorizationpolicysPermissions : authorizationpolicys.permissions) {
//			authorizationpolicysPermissions.format
//		}
//	}	
	
//	def dispatch void format(TenantsecuritysAuthorizationpolicysPermissions permissions, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		interior(
//        	permissions.regionFor.keyword('{').append[newLine],
//        	permissions.regionFor.keyword('}'),
//        	[indent]
//    	)		
//	}	
	
//	def dispatch void format(Models models, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		interior(
//        	models.regionFor.keyword('{').append[newLine],
//        	models.regionFor.keyword('}'),
//        	[indent]
//    	)		
//		
//		for (datasources : models.datasources) {
//			datasources.format
//		}
//		for (selectors : models.selectors) {
//			selectors.format
//		}
//		for (forms : models.forms) {
//			forms.format
//		}
//		for (statemachines : models.statemachines) {
//			statemachines.format
//		}
//		for (enumerations : models.enumerations) {
//			enumerations.format
//		}
//		for (agents : models.agents) {
//			agents.format
//		}
//		for (documents : models.documents) {
//			documents.format
//		}
//		for (series : models.series) {
//			series.format
//		}
//		for (commitments : models.commitments) {
//			commitments.format
//		}
//		for (dashboards : models.dashboards) {
//			dashboards.format
//		}
//		for (lists : models.lists) {
//			lists.format
//		}
//		for (resources : models.resources) {
//			resources.format
//		}
//		for (querys : models.querys) {
//			querys.format
//		}
//	}	
	
//	def dispatch void format(ModelsDatasources type, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		interior(
//        	type.regionFor.keyword('{').append[newLine],
//        	type.regionFor.keyword('}'),
//        	[indent]
//    	)		
//	}	
	
//	def dispatch void format(ModelsSelectors type, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		interior(
//        	type.regionFor.keyword('{').append[newLine],
//        	type.regionFor.keyword('}'),
//        	[indent]
//    	)		
//	}
	
	// Trying to implement something more generic
	def dispatch void format(Element type, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		val open = type.regionFor.keyword("{")
		val close = type.regionFor.keyword("}")
		open.append[newLine]
		open.prepend[newLine]
		close.append[newLine]
		close.prepend[newLine]
		interior(open, close, [indent])
				
//		interior(
//        	type.regionFor.keyword('{').append[newLine],
//        	type.regionFor.keyword('}'),
//        	[indent]
//    	)
    	
    	// For each containment call recursively format
    	
    	for (EObject obj: type.eContents()) {
			if (obj instanceof Element) {
				(obj as Element).format
			}    		
    	}
//    	for (EReference ref: type.eClass().getEReferences()) {
//    		if (ref.isContainment()) {
//    			// Go thru all the elements contained...
//    			type.get
//    		}
//    	}		
	}
	 
		
	// TODO: implement for Models, TenantsecuritysAuthorizationpolicys, TenantsecuritysAuthorizationroles, ModelsDatasources, ModelsSelectors, ModelsForms, ModelsStatemachines, ModelsEnumerations, ModelsAgents, ModelsDocuments, ModelsSeries, ModelsCommitments, ModelsDashboards, ModelsLists, ModelsResources, ModelsQuerys, ModelsDatasourcesAttributes, ModelsSelectorsElements, ModelsFormsElements, ModelsStatemachinesStates, ModelsAgentsAttributes, ModelsDocumentsAttributes, ModelsSeriesAttributes, ModelsCommitmentsAttributes, ModelsDashboardsElements, ModelsListsElements, ModelsResourcesAttributes, ModelsQuerysTable
}
