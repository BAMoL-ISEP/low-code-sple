/**
 * generated by Xtext 2.22.0
 */
package pt.bamol.bamolm2.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import pt.bamol.bamolm2.Element;
import pt.bamol.bamolm2.Models;
import pt.bamol.bamolm2.Root;
import pt.bamol.bamolm2.services.BamolM2GrammarAccess;

@SuppressWarnings("all")
public class BamolM2Formatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BamolM2GrammarAccess _bamolM2GrammarAccess;
  
  protected void _format(final Root root, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(root).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(root).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(close, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Models> _models = root.getModels();
    for (final Models models : _models) {
      document.<Element>format(((Element) models));
    }
  }
  
  protected void _format(final Element type, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(type).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(type).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(open, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(close, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<EObject> _eContents = type.eContents();
    for (final EObject obj : _eContents) {
      if ((obj instanceof Element)) {
        document.<Element>format(((Element) obj));
      }
    }
  }
  
  public void format(final Object root, final IFormattableDocument document) {
    if (root instanceof XtextResource) {
      _format((XtextResource)root, document);
      return;
    } else if (root instanceof Root) {
      _format((Root)root, document);
      return;
    } else if (root instanceof Element) {
      _format((Element)root, document);
      return;
    } else if (root instanceof EObject) {
      _format((EObject)root, document);
      return;
    } else if (root == null) {
      _format((Void)null, document);
      return;
    } else if (root != null) {
      _format(root, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(root, document).toString());
    }
  }
}
