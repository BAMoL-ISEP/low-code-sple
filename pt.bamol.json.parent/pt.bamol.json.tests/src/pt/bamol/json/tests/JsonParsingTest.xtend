/*
 * generated by Xtext 2.22.0
 */
package pt.bamol.json.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(JsonInjectorProvider)
class JsonParsingTest {
	@Inject
	ParseHelper<pt.bamol.json.json.Object> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			{
			  "name": "Company",
			  "attributes": [
			    {
			      "name": "_code",
			      "type": "Text",
			      "isSystem": true,
			      "isReadOnly": false,
			      "description": null,
			      "multiplicity": {
			        "lower": 1.1,
			        "upper": 1.0
			      },
			      "aggregationKind": "None",
			      "isSensitiveData": null,
			      "dependsOnAttribute": null
			    },
			    {
			      "name": "_name",
			      "type": "Text",
			      "isSystem": true,
			      "isReadOnly": false,
			      "description": null,
			      "multiplicity": {
			        "lower": 1.0,
			        "upper": 1.0
			      },
			      "aggregationKind": "None",
			      "isSensitiveData": null,
			      "dependsOnAttribute": null
			    },
			    {
			      "name": "_description",
			      "type": "Text",
			      "isSystem": true,
			      "isReadOnly": false,
			      "description": null,
			      "multiplicity": {
			        "lower": 0.0,
			        "upper": 1.0
			      },
			      "aggregationKind": "None",
			      "isSensitiveData": null,
			      "dependsOnAttribute": null
			    },
			    {
			      "name": "_inactive",
			      "type": "Boolean",
			      "isSystem": true,
			      "isReadOnly": false,
			      "description": null,
			      "multiplicity": {
			        "lower": 1.0,
			        "upper": 1.0
			      },
			      "aggregationKind": "None",
			      "isSensitiveData": null,
			      "dependsOnAttribute": null
			    }
			  ],
			  "dataSource": "System",
			  "description": "",
			  "dataBehaviours": [],
			  "entityBehaviours": [],
			  "behaviourNamespaces": []
			}
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
